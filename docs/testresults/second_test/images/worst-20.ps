%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%Title: Window .58115536
%%CreationDate: Mon Nov 17 02:46:49 2014
%%BoundingBox: -70 19 683 773
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Helvetica
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/Euro/space/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
/circumflex/perthousand/Scaron/guilsinglleft/OE/space/Zcaron/space
/space/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
/tilde/trademark/scaron/guilsinglright/oe/space/zcaron/Ydieresis
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Helvetica
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.75 0.75 scale
-502 -502 translate
0 1004 moveto 1004 1004 lineto 1004 0 lineto 0 0 lineto closepath clip newpath
gsave
296.875 991.5 moveto 506.25 0 rlineto 0 -675 rlineto -506.25 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
296.875 991.5 moveto 506.25 0 rlineto 0 -675 rlineto -506.25 0 rlineto closepath
0 setlinejoin 2 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
651.25 641.34375 moveto
651.25 685.640625 lineto
697.65625 685.640625 lineto
697.65625 641.34375 lineto
651.25 641.34375 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
673.25 664.34375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
524.6875 489.46875 moveto
524.6875 533.765625 lineto
571.09375 533.765625 lineto
571.09375 489.46875 lineto
524.6875 489.46875 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
546.6875 512.46875 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
575.3125 396.65625 moveto
575.3125 440.953125 lineto
621.71875 440.953125 lineto
621.71875 396.65625 lineto
575.3125 396.65625 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
597.3125 419.65625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
360.15625 506.34375 moveto
360.15625 537.984375 lineto
402.34375 537.984375 lineto
402.34375 506.34375 lineto
360.15625 506.34375 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
379.15625 523.34375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
427.65625 447.28125 moveto
427.65625 478.921875 lineto
469.84375 478.921875 lineto
469.84375 447.28125 lineto
427.65625 447.28125 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
446.65625 464.28125 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
351.71875 848.0625 moveto
351.71875 879.703125 lineto
393.90625 879.703125 lineto
393.90625 848.0625 lineto
351.71875 848.0625 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
370.71875 865.0625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
482.5 384 moveto
482.5 415.640625 lineto
524.6875 415.640625 lineto
524.6875 384 lineto
482.5 384 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
501.5 401 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
452.96875 708.84375 moveto
452.96875 740.484375 lineto
495.15625 740.484375 lineto
495.15625 708.84375 lineto
452.96875 708.84375 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
471.96875 725.84375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
714.53125 704.625 moveto
714.53125 738.375 lineto
748.28125 738.375 lineto
748.28125 704.625 lineto
714.53125 704.625 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
731.53125 721.625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
672.34375 852.28125 moveto
672.34375 886.03125 lineto
706.09375 886.03125 lineto
706.09375 852.28125 lineto
672.34375 852.28125 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
689.34375 869.28125 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
583.75 658.21875 moveto
583.75 691.96875 lineto
617.5 691.96875 lineto
617.5 658.21875 lineto
583.75 658.21875 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
600.75 675.21875 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
744.0625 417.75 moveto
744.0625 451.5 lineto
777.8125 451.5 lineto
777.8125 417.75 lineto
744.0625 417.75 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
761.0625 434.75 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
381.25 696.1875 moveto
381.25 729.9375 lineto
415 729.9375 lineto
415 696.1875 lineto
381.25 696.1875 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
398.25 713.1875 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
512.03125 801.65625 moveto
512.03125 835.40625 lineto
545.78125 835.40625 lineto
545.78125 801.65625 lineto
512.03125 801.65625 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
529.03125 818.65625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
372.8125 738.375 moveto
372.8125 772.125 lineto
406.5625 772.125 lineto
406.5625 738.375 lineto
372.8125 738.375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
389.8125 755.375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
322.1875 708.84375 moveto
322.1875 742.59375 lineto
355.9375 742.59375 lineto
355.9375 708.84375 lineto
322.1875 708.84375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
339.1875 725.84375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
360.15625 565.40625 moveto
360.15625 599.15625 lineto
393.90625 599.15625 lineto
393.90625 565.40625 lineto
360.15625 565.40625 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
377.15625 582.40625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
566.875 772.125 moveto
566.875 805.875 lineto
600.625 805.875 lineto
600.625 772.125 lineto
566.875 772.125 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
583.875 789.125 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
752.5 628.6875 moveto
752.5 662.4375 lineto
786.25 662.4375 lineto
786.25 628.6875 lineto
752.5 628.6875 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
769.5 645.6875 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
524.6875 582.28125 moveto
524.6875 616.03125 lineto
558.4375 616.03125 lineto
558.4375 582.28125 lineto
524.6875 582.28125 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
541.6875 599.28125 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
/Helvetica findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
20 984 [
[(Prijsverbetering =  0.00 euro)]
] 18 -0.0 0.5 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
