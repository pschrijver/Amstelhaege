%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%Title: Window .58698368
%%CreationDate: Mon Nov 17 02:46:49 2014
%%BoundingBox: -70 19 683 773
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Helvetica
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/Euro/space/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
/circumflex/perthousand/Scaron/guilsinglleft/OE/space/Zcaron/space
/space/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
/tilde/trademark/scaron/guilsinglright/oe/space/zcaron/Ydieresis
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Helvetica
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.75 0.75 scale
-502 -502 translate
0 1004 moveto 1004 1004 lineto 1004 0 lineto 0 0 lineto closepath clip newpath
gsave
296.875 991.5 moveto 506.25 0 rlineto 0 -675 rlineto -506.25 0 rlineto closepath
1.000 1.000 1.000 setrgbcolor AdjustColor
fill
296.875 991.5 moveto 506.25 0 rlineto 0 -675 rlineto -506.25 0 rlineto closepath
0 setlinejoin 2 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
440.3125 409.3125 moveto
440.3125 453.609375 lineto
486.71875 453.609375 lineto
486.71875 409.3125 lineto
440.3125 409.3125 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
462.3125 432.3125 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
718.75 780.5625 moveto
718.75 824.859375 lineto
765.15625 824.859375 lineto
765.15625 780.5625 lineto
718.75 780.5625 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
740.75 803.5625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
343.28125 911.34375 moveto
343.28125 955.640625 lineto
389.6875 955.640625 lineto
389.6875 911.34375 lineto
343.28125 911.34375 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
365.28125 934.34375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
693.4375 350.25 moveto
693.4375 381.890625 lineto
735.625 381.890625 lineto
735.625 350.25 lineto
693.4375 350.25 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
712.4375 367.25 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
507.8125 843.84375 moveto
507.8125 875.484375 lineto
550 875.484375 lineto
550 843.84375 lineto
507.8125 843.84375 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
526.8125 860.84375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
727.1875 472.59375 moveto
727.1875 504.234375 lineto
769.375 504.234375 lineto
769.375 472.59375 lineto
727.1875 472.59375 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
746.1875 489.59375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
634.375 911.34375 moveto
634.375 942.984375 lineto
676.5625 942.984375 lineto
676.5625 911.34375 lineto
634.375 911.34375 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
653.375 928.34375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
545.78125 603.375 moveto
545.78125 635.015625 lineto
587.96875 635.015625 lineto
587.96875 603.375 lineto
545.78125 603.375 lineto
0.000 0.000 1.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
564.78125 620.375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
339.0625 620.25 moveto
339.0625 654 lineto
372.8125 654 lineto
372.8125 620.25 lineto
339.0625 620.25 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
356.0625 637.25 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
490.9375 708.84375 moveto
490.9375 742.59375 lineto
524.6875 742.59375 lineto
524.6875 708.84375 lineto
490.9375 708.84375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
507.9375 725.84375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
617.5 341.8125 moveto
617.5 375.5625 lineto
651.25 375.5625 lineto
651.25 341.8125 lineto
617.5 341.8125 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
634.5 358.8125 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
756.71875 936.65625 moveto
756.71875 970.40625 lineto
790.46875 970.40625 lineto
790.46875 936.65625 lineto
756.71875 936.65625 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
773.71875 953.65625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
621.71875 632.90625 moveto
621.71875 666.65625 lineto
655.46875 666.65625 lineto
655.46875 632.90625 lineto
621.71875 632.90625 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
638.71875 649.90625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
672.34375 472.59375 moveto
672.34375 506.34375 lineto
706.09375 506.34375 lineto
706.09375 472.59375 lineto
672.34375 472.59375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
689.34375 489.59375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
415 540.09375 moveto
415 573.84375 lineto
448.75 573.84375 lineto
448.75 540.09375 lineto
415 540.09375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
432 557.09375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
710.3125 641.34375 moveto
710.3125 675.09375 lineto
744.0625 675.09375 lineto
744.0625 641.34375 lineto
710.3125 641.34375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
727.3125 658.34375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
402.34375 607.59375 moveto
402.34375 641.34375 lineto
436.09375 641.34375 lineto
436.09375 607.59375 lineto
402.34375 607.59375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
419.34375 624.59375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
440.3125 675.09375 moveto
440.3125 708.84375 lineto
474.0625 708.84375 lineto
474.0625 675.09375 lineto
440.3125 675.09375 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
457.3125 692.09375 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
579.53125 464.15625 moveto
579.53125 497.90625 lineto
613.28125 497.90625 lineto
613.28125 464.15625 lineto
579.53125 464.15625 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
596.53125 481.15625 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
305.3125 455.71875 moveto
305.3125 489.46875 lineto
339.0625 489.46875 lineto
339.0625 455.71875 lineto
305.3125 455.71875 lineto
1.000 0.000 0.000 setrgbcolor AdjustColor
eofill
grestore
gsave
/Helvetica findfont 8 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
322.3125 472.71875 [
[(score)]
] 14 -0.5 0.5 0 false DrawText
grestore
gsave
/Helvetica findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
20 984 [
[(Prijsverbetering =  1.00 euro)]
] 18 -0.0 0.5 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
